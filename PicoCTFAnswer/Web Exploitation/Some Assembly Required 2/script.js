const wasmModule = ['copy_char', 'value', '207aLjBod', '1301420SaUSqf', '233ZRpipt', '2224QffgXU', 'check_flag', '408533hsoVYx', 'instance', '278338GVFUrH', 'Correct!', '549933ZVjkwI', 'innerHTML', 'charCodeAt', './aD8SvhyVkb', 'result', '977AzKzwq', 'Incorrect!', 'exports', 'length', 'getElementById', '1jIrMBu', 'input', '615361geljRK'];
const decipher = function (index, offset) {
  index = index - 0xc3;
  let result = wasmModule[index];
  return result;
};
(function (list, length) {
  while (true) {
    try {
      const mask = -parseInt(decipher(0xc8)) * -parseInt(decipher(0xc9)) + -parseInt(decipher(0xcd)) + parseInt(decipher(0xcf)) + parseInt(decipher(0xc3)) + -parseInt(decipher(0xc6)) * parseInt(decipher(0xd4)) + parseInt(decipher(0xcb)) + -parseInt(decipher(0xd9)) * parseInt(decipher(0xc7));
      if (mask === length) {
        break;
      } else {
        list.push(list.shift());
      }
    } catch (error) {
      list.push(list.shift());
    }
  }
})(wasmModule, 0x4bb06);
let wasmExports;
(async () => {
  let response = await fetch(decipher(0xd2));
  let wasmBinary = await WebAssembly.instantiate(await response.arrayBuffer());
  let wasmInstance = wasmBinary.instance;
  wasmExports = wasmInstance.exports;
})();
function onButtonPress() {
  let inputText = document.getElementById(decipher(0xda)).value;
  for (let i = 0x0; i < inputText.length; i++) {
    wasmExports[decipher(0xc4)](inputText.charCodeAt(i), i);
  }
  wasmExports.copy_char(0x0, inputText.length);
  if (wasmExports[decipher(0xca)]() == 0x1) {
    document.getElementById(decipher(0xd3)).innerHTML = decipher(0xce);
  } else {
    document.getElementById(decipher(0xd3)).innerHTML = decipher(0xd5);
  }
}
