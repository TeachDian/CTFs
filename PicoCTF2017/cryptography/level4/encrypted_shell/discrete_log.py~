from math import ceil, log

def isqrt(n):
    res = 0
    bit = 4**int(ceil(log(n, 4))) if n else 0
    while bit:
        if n >= res + bit:
            n -= res + bit
            res = (res >> 1) + bit
        else:
            res >>= 1
        bit >>= 2
    # ceil
    if res**2 == n:
        return res
    else:
        return res+1
            
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

p = 53047
a = 3
B = 8576

# considering b^e = c (mod n), compute e
def discrete_log(p, a, B):
    m = isqrt(p)
    baby = {}
    for j in range(0, m):
        baby[pow(a, j, p)] = j

    print baby

discrete_log(p, a, B)
